!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/abel_ca/code/c/fibonacci-heap/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/653ca9204/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
BINARY_TREE_H	./include/binary_heap.h	/^#define BINARY_TREE_H$/;"	d
BINARY_TREE_H	./include/binary_tree.h	/^#define BINARY_TREE_H$/;"	d
BNT_COMPARE_LOGIC	./include/binary_heap.h	/^#define BNT_COMPARE_LOGIC /;"	d
BNT_MAX_HEAP	./include/binary_heap.h	/^#define BNT_MAX_HEAP /;"	d
BNT_MIN_HEAP	./include/binary_heap.h	/^#define BNT_MIN_HEAP /;"	d
DEFAULT_HEAP_CAPACITY	./include/heap.h	/^#define DEFAULT_HEAP_CAPACITY /;"	d
DN_DEFAULT_CAPACITY	./include/dynamic_array.h	/^#define DN_DEFAULT_CAPACITY /;"	d
DN_DEFAULT_CAPACITY	./include/dynamical_array.h	/^#define DN_DEFAULT_CAPACITY /;"	d
DN_ELEMENT	./include/dynamic_array.h	/^#define DN_ELEMENT /;"	d
DN_ELEMENT	./include/dynamical_array.h	/^#define DN_ELEMENT /;"	d
DN_MAX_ARRAY_CAPACITY	./include/dynamic_array.h	/^#define DN_MAX_ARRAY_CAPACITY /;"	d
DN_MAX_ARRAY_CAPACITY	./include/dynamical_array.h	/^#define DN_MAX_ARRAY_CAPACITY /;"	d
DOUBLY_LINKED_LIST_H	./include/doubly_linked_list.h	/^#define DOUBLY_LINKED_LIST_H$/;"	d
DYNAMICAL_ARRAY_H	./include/dynamic_array.h	/^#define DYNAMICAL_ARRAY_H$/;"	d
DYNAMICAL_ARRAY_H	./include/dynamical_array.h	/^#define DYNAMICAL_ARRAY_H$/;"	d
ELEMENT	./include/binary_heap.h	/^#define ELEMENT /;"	d
ELEMENT	./include/binary_tree.h	/^#define ELEMENT /;"	d
GET_PARENT_INDEX	./include/heap.h	/^#define GET_PARENT_INDEX(/;"	d
HEAP_H	./include/heap.h	/^#define HEAP_H$/;"	d
INITIAL_CAPACITY	./include/binary_heap.h	/^#define INITIAL_CAPACITY /;"	d
INITIAL_CAPACITY	./include/binary_tree.h	/^#define INITIAL_CAPACITY /;"	d
LINKED_LIST_H	./include/linkedlist.h	/^#define LINKED_LIST_H$/;"	d
MAX_CAPACITY	./include/binary_heap.h	/^#define MAX_CAPACITY /;"	d
MAX_CAPACITY	./include/binary_tree.h	/^#define MAX_CAPACITY /;"	d
MAX_STACK_SIZE	./include/stack.h	/^#define MAX_STACK_SIZE /;"	d
NODE_H	./include/node.h	/^#define NODE_H$/;"	d
QUEUE_H	./include/queue.h	/^#define QUEUE_H$/;"	d
STACK_H	./include/stack.h	/^#define STACK_H$/;"	d
STATUS_NOT_OK	./include/util.h	/^  STATUS_NOT_OK = 0,$/;"	e	enum:status
STATUS_OK	./include/util.h	/^  STATUS_OK$/;"	e	enum:status
SWAP_VALUES	./include/heap.h	/^#define SWAP_VALUES(/;"	d
Stack	./include/stack.h	/^struct Stack {$/;"	s
TEST_DOUBLY_LINKED_LIST_H	./tests/include/test_doubly_list.h	/^#define TEST_DOUBLY_LINKED_LIST_H$/;"	d
TEST_DYNAMIC_ARRAY_H	./tests/include/test_dynamic_array.h	/^#define TEST_DYNAMIC_ARRAY_H$/;"	d
TEST_H	./tests/include/test.h	/^#define TEST_H$/;"	d
TEST_LINKEDLIST_H	./tests/include/test_linkedlist.h	/^#define TEST_LINKEDLIST_H$/;"	d
TEST_MIN_HEAP_H	./tests/include/test_min_heap.h	/^#define TEST_MIN_HEAP_H$/;"	d
TEST_QUEUE_H	./tests/include/test_queue.h	/^#define TEST_QUEUE_H$/;"	d
TEST_STACK_H	./tests/include/test_stack.h	/^#define TEST_STACK_H$/;"	d
TEST_UTIL_H	./tests/include/test_util.h	/^#define TEST_UTIL_H$/;"	d
UTIL_H	./include/util.h	/^#define UTIL_H /;"	d
__TMP__	./include/binary_heap.h	/^    int __TMP__ = (__A__);\\$/;"	v	typeref:typename:int
binary_tree	./include/binary_heap.h	/^struct binary_tree {$/;"	s
binary_tree	./include/binary_tree.h	/^struct binary_tree {$/;"	s
bnt_bubble_up	./src/binary_heap.c	/^void bnt_bubble_up(bnt_t* root, int index){$/;"	f	typeref:typename:void
bnt_compare	./include/binary_heap.h	/^#define bnt_compare(/;"	d
bnt_contains	./src/binary_heap.c	/^bnt_stat_t bnt_contains(bnt_t* root, ELEMENT value){$/;"	f	typeref:typename:bnt_stat_t
bnt_create_bn_tree	./src/binary_heap.c	/^bnt_t bnt_create_bn_tree(int capacity){$/;"	f	typeref:typename:bnt_t
bnt_create_bn_tree	./src/binary_tree.c	/^bnt_t bnt_create_bn_tree(int capacity){$/;"	f	typeref:typename:bnt_t
bnt_create_bn_tree_arr	./src/binary_heap.c	/^bnt_t bnt_create_bn_tree_arr(ELEMENT arr, size_t length_arr){$/;"	f	typeref:typename:bnt_t
bnt_create_bntree_default	./include/binary_heap.h	/^#define bnt_create_bntree_default(/;"	d
bnt_create_bntree_default	./include/binary_tree.h	/^#define bnt_create_bntree_default(/;"	d
bnt_dequeue	./src/binary_heap.c	/^ELEMENT bnt_dequeue(bnt_t* root){$/;"	f	typeref:typename:ELEMENT
bnt_enqueue	./src/binary_heap.c	/^bnt_stat_t bnt_enqueue(bnt_t* root, ELEMENT value){$/;"	f	typeref:typename:bnt_stat_t
bnt_enqueue	./src/binary_heap.c	/^int bnt_enqueue(bnt_t* root, int data){$/;"	f	typeref:typename:int
bnt_enqueue	./src/binary_tree.c	/^int bnt_enqueue(bnt_t*, int data){$/;"	f	typeref:typename:int
bnt_free	./src/binary_heap.c	/^void bnt_free(bnt_t* root){$/;"	f	typeref:typename:void
bnt_freeDeep	./src/binary_heap.c	/^void bnt_freeDeep(bnt_t* root){$/;"	f	typeref:typename:void
bnt_get_Capacity	./include/binary_heap.h	/^#define bnt_get_Capacity(/;"	d
bnt_get_lchild_index	./include/binary_heap.h	/^#define bnt_get_lchild_index(/;"	d
bnt_get_lchld	./include/binary_heap.h	/^#define bnt_get_lchld(/;"	d
bnt_get_lchld	./include/binary_tree.h	/^#define bnt_get_lchld(/;"	d
bnt_get_prnt	./include/binary_tree.h	/^#define bnt_get_prnt(/;"	d
bnt_get_prnt_index	./include/binary_heap.h	/^#define bnt_get_prnt_index(/;"	d
bnt_get_rchild_index	./include/binary_heap.h	/^#define bnt_get_rchild_index(/;"	d
bnt_get_rchld	./include/binary_heap.h	/^#define bnt_get_rchld(/;"	d
bnt_get_rchld	./include/binary_tree.h	/^#define bnt_get_rchld(/;"	d
bnt_heapify	./src/binary_heap.c	/^bnt_stat_t bnt_heapify(bnt_t* root, int index){$/;"	f	typeref:typename:bnt_stat_t
bnt_heapify	./src/binary_heap.c	/^int bnt_heapify(bnt* root, ELEMENT arr, size_t length_arr){$/;"	f	typeref:typename:int
bnt_heapify	./src/binary_heap.c	/^void bnt_heapify(bnt_t* root, size_t index){$/;"	f	typeref:typename:void
bnt_index_of	./src/binary_heap.c	/^bnt_stat_t bnt_index_of(bnt_t* root, dn_arr_t* indexes, size_t curr_index, ELEMENT value){$/;"	f	typeref:typename:bnt_stat_t
bnt_isEmpty	./include/binary_heap.h	/^#define bnt_isEmpty(/;"	d
bnt_isFull	./include/binary_heap.h	/^#define bnt_isFull(/;"	d
bnt_isNotNull	./include/binary_heap.h	/^#define bnt_isNotNull(/;"	d
bnt_isNull	./include/binary_heap.h	/^#define bnt_isNull(/;"	d
bnt_print_heap	./include/binary_heap.h	/^#define bnt_print_heap(__root__) bnt_print_heap_/;"	d
bnt_print_heap_with_name	./src/binary_heap.c	/^bnt_stat_t bnt_print_heap_with_name(bnt_t* heap, const char* name){$/;"	f	typeref:typename:bnt_stat_t
bnt_swap	./include/binary_heap.h	/^#define bnt_swap(/;"	d
bnt_t	./include/binary_heap.h	/^typedef struct binary_tree bnt_t;$/;"	t	typeref:struct:binary_tree
bnt_t	./include/binary_tree.h	/^typdef struct binary_tree bnt_t;$/;"	v	typeref:struct:binary_tree
capacity	./include/binary_heap.h	/^  size_t capacity;$/;"	m	struct:binary_tree	typeref:typename:size_t
capacity	./include/binary_tree.h	/^  size_t capacity;$/;"	m	struct:binary_tree	typeref:typename:size_t
capacity	./include/dynamic_array.h	/^  size_t capacity;$/;"	m	struct:dynamic_array	typeref:typename:size_t
capacity	./include/dynamical_array.h	/^  size_t capacity;$/;"	m	struct:dynamic_array	typeref:typename:size_t
capacity	./include/heap.h	/^    unsigned int capacity;$/;"	m	struct:heap	typeref:typename:unsigned int
cleanup_suite	./tests/test.c	/^int cleanup_suite() {$/;"	f	typeref:typename:int
data	./include/dynamic_array.h	/^  DN_ELEMENT* data;$/;"	m	struct:dynamic_array	typeref:typename:DN_ELEMENT *
data	./include/dynamical_array.h	/^  DN_ELEMENT* data;$/;"	m	struct:dynamic_array	typeref:typename:DN_ELEMENT *
data	./include/heap.h	/^    int *data;$/;"	m	struct:heap	typeref:typename:int *
data	./include/node.h	/^    int data;$/;"	m	struct:double_node	typeref:typename:int
data	./include/node.h	/^    int data;$/;"	m	struct:single_node	typeref:typename:int
dl_list	./include/doubly_linked_list.h	/^struct dl_list {$/;"	s
dl_node_t	./include/node.h	/^typedef struct double_node dl_node_t;$/;"	t	typeref:struct:double_node
dll_add_node_head	./src/doubly_linked_list.c	/^int dll_add_node_head(dll_t* list, dnode_t* node){$/;"	f	typeref:typename:int
dll_add_node_tail	./src/doubly_linked_list.c	/^int dll_add_node_tail(dll_t* list, dnode_t* node){$/;"	f	typeref:typename:int
dll_create_list	./src/doubly_linked_list.c	/^dll_t dll_create_list(int data){$/;"	f	typeref:typename:dll_t
dll_freeDeep_list	./src/doubly_linked_list.c	/^void dll_freeDeep_list(dll_t* list){$/;"	f	typeref:typename:void
dll_free_list	./src/doubly_linked_list.c	/^void dll_free_list(dll_t* list){$/;"	f	typeref:typename:void
dll_insert_node_at	./src/doubly_linked_list.c	/^int dll_insert_node_at(dll_t* list, dnode_t* node, unsigned int index){$/;"	f	typeref:typename:int
dll_is_empty	./include/doubly_linked_list.h	/^#define dll_is_empty(/;"	d
dll_is_not_null	./include/doubly_linked_list.h	/^#define dll_is_not_null(/;"	d
dll_is_null	./include/doubly_linked_list.h	/^#define dll_is_null(/;"	d
dll_length	./include/doubly_linked_list.h	/^#define dll_length(/;"	d
dll_peek_at	./src/doubly_linked_list.c	/^dnode_t dll_peek_at(dll_t* list, unsigned int index){$/;"	f	typeref:typename:dnode_t
dll_peek_head	./src/doubly_linked_list.c	/^dnode_t dll_peek_head(dll_t* list) {$/;"	f	typeref:typename:dnode_t
dll_peek_tail	./src/doubly_linked_list.c	/^dnode_t dll_peek_tail(dll_t* list){$/;"	f	typeref:typename:dnode_t
dll_print_list	./src/doubly_linked_list.c	/^int dll_print_list(dll_t* list){$/;"	f	typeref:typename:int
dll_remove_node_at	./src/doubly_linked_list.c	/^dnode_t dll_remove_node_at(dll_t* list, unsigned int index){$/;"	f	typeref:typename:dnode_t
dll_remove_node_head	./src/doubly_linked_list.c	/^dnode_t dll_remove_node_head(dll_t* list){$/;"	f	typeref:typename:dnode_t
dll_remove_node_tail	./src/doubly_linked_list.c	/^dnode_t dll_remove_node_tail(dll_t* list){$/;"	f	typeref:typename:dnode_t
dll_search_list	./src/doubly_linked_list.c	/^dnode_t dll_search_list(dll_t* list, int data, void (*callback)(void*)){$/;"	f	typeref:typename:dnode_t
dll_t	./include/doubly_linked_list.h	/^typedef struct dl_list dll_t;$/;"	t	typeref:struct:dl_list
dll_travel_list	./src/doubly_linked_list.c	/^int dll_travel_list(dll_t* list, void (*callback)(void*)){$/;"	f	typeref:typename:int
dn_arr_bot	./include/dynamic_array.h	/^inline DN_ELEMENT dn_arr_bot(dn_arr_t* arr){$/;"	f	typeref:typename:DN_ELEMENT
dn_arr_bot	./include/dynamical_array.h	/^inline DN_ELEMENT dn_arr_bot(dn_arr_t* arr){$/;"	f	typeref:typename:DN_ELEMENT
dn_arr_create	./src/dynamic_array.c	/^dn_arr_t dn_arr_create(int capacity){$/;"	f	typeref:typename:dn_arr_t
dn_arr_create	./src/dynimcal_array.c	/^dn_arr_t dn_arr_create(int capacity){$/;"	f	typeref:typename:dn_arr_t
dn_arr_create_default	./include/dynamic_array.h	/^#define dn_arr_create_default(/;"	d
dn_arr_create_default	./include/dynamical_array.h	/^#define dn_arr_create_default(/;"	d
dn_arr_free	./src/dynamic_array.c	/^void dn_arr_free(dn_arr_t* arr){$/;"	f	typeref:typename:void
dn_arr_free	./src/dynimcal_array.c	/^void dn_arr_free(dn_arr_t* arr){$/;"	f	typeref:typename:void
dn_arr_freeDeep	./src/dynamic_array.c	/^void dn_arr_freeDeep(dn_arr_t* arr){$/;"	f	typeref:typename:void
dn_arr_freeDeep	./src/dynimcal_array.c	/^void dn_arr_freeDeep(dn_arr_t* arr){$/;"	f	typeref:typename:void
dn_arr_isEmpty	./include/dynamic_array.h	/^#define dn_arr_isEmpty(/;"	d
dn_arr_isEmpty	./include/dynamical_array.h	/^#define dn_arr_isEmpty(/;"	d
dn_arr_isFull	./include/dynamic_array.h	/^#define dn_arr_isFull(/;"	d
dn_arr_isFull	./include/dynamical_array.h	/^#define dn_arr_isFull(/;"	d
dn_arr_isNull	./include/dynamic_array.h	/^#define dn_arr_isNull(/;"	d
dn_arr_isNull	./include/dynamical_array.h	/^#define dn_arr_isNull(/;"	d
dn_arr_pop	./src/dynamic_array.c	/^DN_ELEMENT dn_arr_pop(dn_arr_t* arr){$/;"	f	typeref:typename:DN_ELEMENT
dn_arr_pop	./src/dynimcal_array.c	/^DN_ELEMENT dn_arr_pop(dn_arr_t* arr){$/;"	f	typeref:typename:DN_ELEMENT
dn_arr_push	./src/dynamic_array.c	/^void dn_arr_push(dn_arr_t* arr, DN_ELEMENT value){$/;"	f	typeref:typename:void
dn_arr_push	./src/dynimcal_array.c	/^void dn_arr_push(dn_arr_t* arr, DN_ELEMENT value){$/;"	f	typeref:typename:void
dn_arr_t	./include/dynamic_array.h	/^typedef struct dynamic_array dn_arr_t; $/;"	t	typeref:struct:dynamic_array
dn_arr_t	./include/dynamical_array.h	/^typedef struct dynamic_array dn_arr_t; $/;"	t	typeref:struct:dynamic_array
dn_arr_top	./include/dynamic_array.h	/^inline DN_ELEMENT dn_arr_top(dn_arr_t* arr){$/;"	f	typeref:typename:DN_ELEMENT
dn_arr_top	./include/dynamical_array.h	/^inline DN_ELEMENT dn_arr_top(dn_arr_t* arr){$/;"	f	typeref:typename:DN_ELEMENT
dnode_t	./include/doubly_linked_list.h	/^typedef dl_node_t dnode_t;$/;"	t	typeref:typename:dl_node_t
double_node	./include/node.h	/^struct double_node {$/;"	s
dynamic_array	./include/dynamic_array.h	/^struct dynamic_array{$/;"	s
dynamic_array	./include/dynamical_array.h	/^struct dynamic_array{$/;"	s
front	./include/queue.h	/^    q_node_t *front;$/;"	m	struct:queue	typeref:typename:q_node_t *
head	./include/doubly_linked_list.h	/^    dnode_t* head;$/;"	m	struct:dl_list	typeref:typename:dnode_t *
head	./include/linkedlist.h	/^    node_t* head;$/;"	m	struct:list	typeref:typename:node_t *
heap	./include/heap.h	/^struct heap {$/;"	s
heap_t	./include/heap.h	/^typedef struct heap heap_t;$/;"	t	typeref:struct:heap
hp_alloc_heap	./src/heap.c	/^heap_t *hp_alloc_heap(unsigned int capacity)$/;"	f	typeref:typename:heap_t *
hp_alloc_heap_from_array	./src/heap.c	/^heap_t *hp_alloc_heap_from_array(int *array, unsigned int size)$/;"	f	typeref:typename:heap_t *
hp_extract_min	./src/heap.c	/^int hp_extract_min(heap_t *heap)$/;"	f	typeref:typename:int
hp_free_deep_heap	./src/heap.c	/^void hp_free_deep_heap(heap_t *heap)$/;"	f	typeref:typename:void
hp_free_heap	./src/heap.c	/^void hp_free_heap(heap_t *heap)$/;"	f	typeref:typename:void
hp_insert	./src/heap.c	/^void hp_insert(heap_t *heap, int value)$/;"	f	typeref:typename:void
hp_min_heapify	./src/heap.c	/^void hp_min_heapify(heap_t *heap, unsigned int index)$/;"	f	typeref:typename:void
hp_print_heap	./src/heap.c	/^void hp_print_heap(heap_t *heap)$/;"	f	typeref:typename:void
initialize_suite	./tests/test.c	/^int initialize_suite() {$/;"	f	typeref:typename:int
items	./include/stack.h	/^    int items[MAX_STACK_SIZE];$/;"	m	struct:Stack	typeref:typename:int[]
length	./include/doubly_linked_list.h	/^    unsigned int length;$/;"	m	struct:dl_list	typeref:typename:unsigned int
length	./include/linkedlist.h	/^    unsigned int length;$/;"	m	struct:list	typeref:typename:unsigned int
list	./include/linkedlist.h	/^struct list {$/;"	s
ll_create_list	./src/linkedlist.c	/^ll_t ll_create_list(int data){$/;"	f	typeref:typename:ll_t
ll_delete_node_at	./src/linkedlist.c	/^node_t ll_delete_node_at(ll_t* list, uint32_t index){$/;"	f	typeref:typename:node_t
ll_delete_node_head	./src/linkedlist.c	/^node_t ll_delete_node_head(ll_t* list){$/;"	f	typeref:typename:node_t
ll_delete_node_tail	./src/linkedlist.c	/^node_t ll_delete_node_tail(ll_t* list){$/;"	f	typeref:typename:node_t
ll_freeDeep_list	./src/linkedlist.c	/^void ll_freeDeep_list(ll_t* list){$/;"	f	typeref:typename:void
ll_free_list	./src/linkedlist.c	/^void ll_free_list(ll_t* list){$/;"	f	typeref:typename:void
ll_insert_node_at	./src/linkedlist.c	/^void ll_insert_node_at(ll_t* list, node_t* node, uint32_t index){$/;"	f	typeref:typename:void
ll_insert_node_head	./src/linkedlist.c	/^void ll_insert_node_head(ll_t* list, node_t* node){$/;"	f	typeref:typename:void
ll_insert_node_tail	./src/linkedlist.c	/^void ll_insert_node_tail(ll_t* list, node_t* node){$/;"	f	typeref:typename:void
ll_is_empty	./include/linkedlist.h	/^#define ll_is_empty(/;"	d
ll_is_not_null	./include/linkedlist.h	/^#define ll_is_not_null(/;"	d
ll_is_not_tail	./include/linkedlist.h	/^#define ll_is_not_tail(/;"	d
ll_is_null	./include/linkedlist.h	/^#define ll_is_null(/;"	d
ll_is_tail	./include/linkedlist.h	/^#define ll_is_tail(/;"	d
ll_length	./include/linkedlist.h	/^#define ll_length(/;"	d
ll_peek_at	./src/linkedlist.c	/^node_t ll_peek_at(ll_t* list, uint32_t index){$/;"	f	typeref:typename:node_t
ll_peek_head	./src/linkedlist.c	/^node_t ll_peek_head(ll_t* list){$/;"	f	typeref:typename:node_t
ll_peek_tail	./src/linkedlist.c	/^node_t ll_peek_tail(ll_t* list){$/;"	f	typeref:typename:node_t
ll_print_list	./src/linkedlist.c	/^void ll_print_list(ll_t* list){$/;"	f	typeref:typename:void
ll_search_list	./src/linkedlist.c	/^void ll_search_list(ll_t* list, int data, void (*callback)(void*)){$/;"	f	typeref:typename:void
ll_t	./include/linkedlist.h	/^typedef struct list ll_t;$/;"	t	typeref:struct:list
ll_travel_list	./src/linkedlist.c	/^void ll_travel_list(ll_t* list, void (*callback)(void*)){$/;"	f	typeref:typename:void
main	./src/main.c	/^int main(void) $/;"	f	typeref:typename:int
main	./tests/test.c	/^int main() {$/;"	f	typeref:typename:int
n_create_dnode	./src/node.c	/^dl_node_t* n_create_dnode(int data){$/;"	f	typeref:typename:dl_node_t *
n_create_node	./src/node.c	/^sl_node_t* n_create_node(int data){$/;"	f	typeref:typename:sl_node_t *
n_free_dnode	./src/node.c	/^void n_free_dnode(dl_node_t* node){$/;"	f	typeref:typename:void
n_free_node	./src/node.c	/^void n_free_node(sl_node_t* node){$/;"	f	typeref:typename:void
n_print_dnode	./src/node.c	/^void n_print_dnode(dl_node_t* node){$/;"	f	typeref:typename:void
n_print_node	./src/node.c	/^void n_print_node(sl_node_t* node){$/;"	f	typeref:typename:void
next	./include/node.h	/^    struct double_node *next;$/;"	m	struct:double_node	typeref:struct:double_node *
next	./include/node.h	/^    struct single_node *next;$/;"	m	struct:single_node	typeref:struct:single_node *
node_is_not_null	./include/node.h	/^#define node_is_not_null(/;"	d
node_is_null	./include/node.h	/^#define node_is_null(/;"	d
node_t	./include/linkedlist.h	/^typedef sl_node_t node_t;$/;"	t	typeref:typename:sl_node_t
nodes	./include/binary_heap.h	/^  ELEMENT nodes;$/;"	m	struct:binary_tree	typeref:typename:ELEMENT
nodes	./include/binary_tree.h	/^  ELEMENT nodes;$/;"	m	struct:binary_tree	typeref:typename:ELEMENT
prev	./include/node.h	/^    struct double_node *prev;$/;"	m	struct:double_node	typeref:struct:double_node *
q_node_t	./include/queue.h	/^typedef sl_node_t q_node_t;$/;"	t	typeref:typename:sl_node_t
qe_create_queue	./src/queue.c	/^queue_t qe_create_queue(void) {$/;"	f	typeref:typename:queue_t
qe_dequeue	./src/queue.c	/^int qe_dequeue(queue_t *queue){$/;"	f	typeref:typename:int
qe_enqueue	./src/queue.c	/^int qe_enqueue(queue_t *queue, void *data) {$/;"	f	typeref:typename:int
qe_freeDeep_queue	./src/queue.c	/^void qe_freeDeep_queue(queue_t *queue) {$/;"	f	typeref:typename:void
qe_free_queue	./src/queue.c	/^void qe_free_queue(queue_t *queue) {$/;"	f	typeref:typename:void
qe_isEmpty	./include/queue.h	/^#define qe_isEmpty(/;"	d
qe_is_not_null	./include/queue.h	/^#define qe_is_not_null(/;"	d
qe_is_null	./include/queue.h	/^#define qe_is_null(/;"	d
qe_length	./include/queue.h	/^#define qe_length(/;"	d
qe_peek_front	./include/queue.h	/^inline int qe_peek_front(queue_t *queue){$/;"	f	typeref:typename:int
qe_peek_rear	./include/queue.h	/^inline int qe_peek_rear(queue_t *queue){$/;"	f	typeref:typename:int
qe_print_queue	./src/queue.c	/^void qe_print_queue(queue_t *queue) {$/;"	f	typeref:typename:void
queue	./include/queue.h	/^typedef struct queue {$/;"	s
queue_t	./include/queue.h	/^typedef struct queue queue_t;$/;"	t	typeref:struct:queue
rear	./include/queue.h	/^    q_node_t *rear;$/;"	m	struct:queue	typeref:typename:q_node_t *
single_node	./include/node.h	/^struct single_node {$/;"	s
size	./include/binary_heap.h	/^  size_t size;$/;"	m	struct:binary_tree	typeref:typename:size_t
size	./include/binary_tree.h	/^  size_t size;$/;"	m	struct:binary_tree	typeref:typename:size_t
size	./include/dynamic_array.h	/^  size_t size;$/;"	m	struct:dynamic_array	typeref:typename:size_t
size	./include/dynamical_array.h	/^  size_t size;$/;"	m	struct:dynamic_array	typeref:typename:size_t
size	./include/heap.h	/^    unsigned int size;$/;"	m	struct:heap	typeref:typename:unsigned int
size	./include/queue.h	/^    unsigned int size;$/;"	m	struct:queue	typeref:typename:unsigned int
size	./include/stack.h	/^    unsigned int size;    $/;"	m	struct:Stack	typeref:typename:unsigned int
sl_node_t	./include/node.h	/^typedef struct single_node sl_node_t;$/;"	t	typeref:struct:single_node
stack_create	./src/stack.c	/^stack_t stack_create(void) {$/;"	f	typeref:typename:stack_t
stack_free	./src/stack.c	/^void stack_free(stack_t *stack) {$/;"	f	typeref:typename:void
stack_is_empty	./include/stack.h	/^#define stack_is_empty(/;"	d
stack_is_full	./include/stack.h	/^#define stack_is_full(/;"	d
stack_peek	./include/stack.h	/^inline int stack_peek(stack_t *stack){$/;"	f	typeref:typename:int
stack_pop	./src/stack.c	/^int stack_pop(stack_t *stack) {$/;"	f	typeref:typename:int
stack_push	./src/stack.c	/^int stack_push(stack_t *stack, int item) {$/;"	f	typeref:typename:int
stack_size	./include/stack.h	/^#define stack_size(/;"	d
stack_t	./include/stack.h	/^typedef struct Stack stack_t;$/;"	t	typeref:struct:Stack
status	./include/util.h	/^enum status {$/;"	g
tail	./include/doubly_linked_list.h	/^    dnode_t* tail;$/;"	m	struct:dl_list	typeref:typename:dnode_t *
tail	./include/linkedlist.h	/^    const node_t* tail;$/;"	m	struct:list	typeref:typename:const node_t *
testAllocateHeap	./tests/test_min_heap.c	/^void testAllocateHeap() {$/;"	f	typeref:typename:void
testAllocateHeapFromArray	./tests/test_min_heap.c	/^void testAllocateHeapFromArray()$/;"	f	typeref:typename:void
testCreateList	./tests/test_linkedlist.c	/^void testCreateList(void){$/;"	f	typeref:typename:void
testInsert	./tests/test_min_heap.c	/^void testInsert()$/;"	f	typeref:typename:void
testInsertIntoHeapArray	./tests/test_min_heap.c	/^void testInsertIntoHeapArray()$/;"	f	typeref:typename:void
test_dll_add_remove_node_head	./tests/test_doubly_list.c	/^void test_dll_add_remove_node_head(void){$/;"	f	typeref:typename:void
test_dll_add_remove_node_tail	./tests/test_doubly_list.c	/^void test_dll_add_remove_node_tail(void){$/;"	f	typeref:typename:void
test_dll_create_list	./tests/test_doubly_list.c	/^void test_dll_create_list(void){$/;"	f	typeref:typename:void
test_dll_insert_remove_node_at	./tests/test_doubly_list.c	/^void test_dll_insert_remove_node_at(void){$/;"	f	typeref:typename:void
test_dll_peek	./tests/test_doubly_list.c	/^void test_dll_peek(void){$/;"	f	typeref:typename:void
test_doubly_linked_list_suite	./tests/test_doubly_list.c	/^int test_doubly_linked_list_suite(CU_pSuite dll_suite){$/;"	f	typeref:typename:int
test_dyn_arr_create	./tests/test_dynamic_array.c	/^void test_dyn_arr_create(void){$/;"	f	typeref:typename:void
test_dyn_arr_peek	./tests/test_dynamic_array.c	/^void test_dyn_arr_peek(void){$/;"	f	typeref:typename:void
test_dyn_arr_push_pop	./tests/test_dynamic_array.c	/^void test_dyn_arr_push_pop(void){$/;"	f	typeref:typename:void
test_dynamic_arr_suite	./tests/test_dynamic_array.c	/^int test_dynamic_arr_suite(CU_pSuite dyn_arr_suite){$/;"	f	typeref:typename:int
test_linkedlist_suite	./tests/test_linkedlist.c	/^int test_linkedlist_suite(CU_pSuite linkedlist_suite){$/;"	f	typeref:typename:int
test_ll_delete_node_at	./tests/test_linkedlist.c	/^void test_ll_delete_node_at(void){$/;"	f	typeref:typename:void
test_ll_delete_node_head	./tests/test_linkedlist.c	/^void test_ll_delete_node_head(void){$/;"	f	typeref:typename:void
test_ll_delete_node_tail	./tests/test_linkedlist.c	/^void test_ll_delete_node_tail(void){$/;"	f	typeref:typename:void
test_ll_insert_node_at	./tests/test_linkedlist.c	/^void test_ll_insert_node_at(void){$/;"	f	typeref:typename:void
test_ll_insert_node_head	./tests/test_linkedlist.c	/^void test_ll_insert_node_head(void){$/;"	f	typeref:typename:void
test_ll_insert_node_tail	./tests/test_linkedlist.c	/^void test_ll_insert_node_tail(void){$/;"	f	typeref:typename:void
test_min_heap_suite	./tests/test_min_heap.c	/^int test_min_heap_suite(CU_pSuite min_heap_suite){$/;"	f	typeref:typename:int
test_peek	./tests/test_linkedlist.c	/^void test_peek(void){$/;"	f	typeref:typename:void
test_queue_create_free	./tests/test_queue.c	/^void test_queue_create_free(void){$/;"	f	typeref:typename:void
test_queue_enqueue_dequeue	./tests/test_queue.c	/^void test_queue_enqueue_dequeue(void){$/;"	f	typeref:typename:void
test_queue_peek	./tests/test_queue.c	/^void test_queue_peek(void){$/;"	f	typeref:typename:void
test_queue_suite	./tests/test_queue.c	/^int test_queue_suite(CU_pSuite q_suite){$/;"	f	typeref:typename:int
test_random_int	./tests/include/test_doubly_list.h	/^inline int test_random_int(int upper, int lower){$/;"	f	typeref:typename:int
test_random_int	./tests/include/test_util.h	/^inline int test_random_int(int upper, int lower){$/;"	f	typeref:typename:int
test_stack_create	./tests/test_stack.c	/^void test_stack_create(void){$/;"	f	typeref:typename:void
test_stack_push_pop	./tests/test_stack.c	/^void test_stack_push_pop(void){$/;"	f	typeref:typename:void
test_stack_suite	./tests/test_stack.c	/^int test_stack_suite(CU_pSuite stack_suite){$/;"	f	typeref:typename:int
